generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Room {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  creator     String
  title       String
  description String?
  password    String?
  isPrivate   Boolean       @default(false)
  code        String
  Question    Questions[]
  Students    Students[]
  UserAnswers UserAnswers[]
}

model Questions {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  roomId             String               @db.ObjectId
  room               Room?                @relation(fields: [roomId], references: [id])
  text               String
  Answers            Answers[]
  UserAnswersDetails UserAnswersDetails[]
}

model Answers {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  Question           Questions?           @relation(fields: [questionId], references: [id])
  questionId         String?              @db.ObjectId
  text               String
  isCorrect          Boolean              @default(false)
  UserAnswersDetails UserAnswersDetails[]
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  username    String
  avatar      String?
  clerkUserId String?    @unique
  roomId      String?    @db.ObjectId
  students    Students[]
}

model Students {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  userId             String               @db.ObjectId
  roomId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  room               Room                 @relation(fields: [roomId], references: [id])
  isSubmitted        Boolean?             @default(false)
  UserAnswersDetails UserAnswersDetails[]
  UserAnswers        UserAnswers[]
}

model UserAnswers {
  id                String               @id @default(auto()) @map("_id") @db.ObjectId
  studentId         String               @db.ObjectId
  student           Students             @relation(fields: [studentId], references: [id])
  userAnswerDetails UserAnswersDetails[]
  roomId            String               @db.ObjectId
  room              Room                 @relation(fields: [roomId], references: [id])
}

model UserAnswersDetails {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String       @db.ObjectId
  student       Students?    @relation(fields: [studentId], references: [id])
  questionId    String       @db.ObjectId
  question      Questions    @relation(fields: [questionId], references: [id])
  UserAnswers   UserAnswers? @relation(fields: [userAnswersId], references: [id])
  userAnswersId String?      @db.ObjectId
  answerId      String       @db.ObjectId
  answer        Answers?     @relation(fields: [answerId], references: [id])
}
